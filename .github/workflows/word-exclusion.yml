name: Word Exclusion

on:
  push:
    branches:
      - 'tmo-main'

jobs:
  word_exclusion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell Core
        run: |
          # Import the Microsoft repository GPG key
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          # Install PowerShell Core
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Read .gitattributes
        id: read_gitattributes
        run: |
          scripts/* scan-directory
          doc/* scan-directory
          $GitAttributesPath = "${env:GITHUB_WORKSPACE}/.gitattributes"
          if (Test-Path -Path $GitAttributesPath) {
              $SelectedFolders = Get-Content -Path $GitAttributesPath | ForEach-Object {
                  if ($_ -match '^\s*([^#\s].*?)\s+scan-directory$') {
                      $Matches[1]
                  }
              }
          } else {
              Write-Warning "No .gitattributes file found in the repository. Using default folders."
              $SelectedFolders = @("scripts", "doc")
          }
          Write-Output "Selected Folders: $SelectedFolders"

      - name: Run Word Exclusion script
        run: |
          $Patterns = @("private", "pets*", "tracker*")
          $RootPath = $env:GITHUB_WORKSPACE
          $WordExcludeList = @("snippet")

          $Matches = @()

          foreach ($SelectedFolder in $SelectedFolders) {
              $SelectedFolderPath = Join-Path -Path $RootPath -ChildPath $SelectedFolder

              Get-ChildItem -Path $SelectedFolderPath -Recurse | ForEach-Object {
                  $Type = if ($_.PSIsContainer) { "dir" } else { "filename" }
                  $Name = $_.FullName

                  foreach ($Pattern in $Patterns) {
                      if ($WordExcludeList -notcontains $Pattern) {
                          if ($Name -like "*$Pattern*") {
                              $Matches += New-Object PSObject -Property @{
                                  Type = $Type
                                  Match = $Pattern
                                  Name = $Name
                              }
                          }
                      }
                  }
              }

              Get-ChildItem -Path $SelectedFolderPath -Recurse -File | ForEach-Object {
                  $FileName = $_.FullName

                  foreach ($Pattern in $Patterns) {
                      if ($WordExcludeList -notcontains $Pattern) {
                          if (Select-String -Path $FileName -Pattern $Pattern -Quiet) {
                              $Matches += New-Object PSObject -Property @{
                                  Type = "file"
                                  Match = $Pattern
                                  Name = $FileName
                              }
                          }
                      }
                  }
              }
          }

          $Matches

          $MatchesJson = $Matches | ConvertTo-Json -Depth 100
          Write-Output $MatchesJson | Out-File matches.json
        shell: pwsh

      - name: Upload JSON output
        uses: actions/upload-artifact@v2
        with:
          name: matches
          path: matches.json
