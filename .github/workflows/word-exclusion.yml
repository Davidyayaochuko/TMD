name: Word Exclusion

on:
  push:
    branches:
      - 'tmo-main'
  pull_request_target:
    branches:
      - 'tmo-main'

jobs:
  word_exclusion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell Core
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Get directory paths from .gitattributes
        id: GetDirectories
        run: |
          directories=$(tail -n +18 .gitattributes | awk '{print $1}' | grep -v -E '^\s*#|merge=ours')
          echo "::set-output name=directories::$directories"

      - name: Run Word Search script
        needs: GetDirectories
        run: |
          $WordList = @("private", "pets", "tracker") # Add the words you want to find here
          $Matches = @()

          # Access the 'directories' output from the previous job using the 'needs' context
          $Directories = ${{ needs.GetDirectories.outputs.directories }}

          foreach ($Directory in $Directories) {
            $Directory = $Directory.Trim()

            if (Test-Path $Directory) {
              Get-ChildItem -Path $Directory -Recurse -Include "*" -File | ForEach-Object {
                $FileName = $_.FullName

                # Check for matches in file content
                foreach ($Word in $WordList) {
                  if (Select-String -Path $FileName -Pattern $Word -Quiet) {
                    $Matches += New-Object PSObject -Property @{
                      Directory = $Directory
                      Match = $Word
                      File = $FileName
                    }
                  }
                }

                # Check for matches in filename
                foreach ($Word in $WordList) {
                  if ($_ -match $Word) {
                    $Matches += New-Object PSObject -Property @{
                      Directory = $Directory
                      Match = $Word
                      File = $FileName
                    }
                  }
                }
              }

              # Check for matches in folder names
              Get-ChildItem -Path $Directory -Recurse -Directory | ForEach-Object {
                $FolderName = $_.Name

                foreach ($Word in $WordList) {
                  if ($FolderName -match $Word) {
                    $Matches += New-Object PSObject -Property @{
                      Directory = $Directory
                      Match = $Word
                      Folder = $FolderName
                    }
                  }
                }
              }
            }
          }

          if ($Matches.Count -gt 0) {
            Write-Host "Word matches found. The job has failed." -ForegroundColor Red
            $Matches | ConvertTo-Json -Depth 100 | Out-File matches.json
            exit 1
          } else {
            Write-Host "No word matches found. The job has succeeded." -ForegroundColor Green
          }
        shell: pwsh

      - name: Get modified files and folders
        id: changes
        run: |
          # Fetch the commit hash of the latest commit on the tmo-main branch
          commit_hash=$(git rev-parse origin/tmo-main)
          # Get the list of modified files and folders between the current branch and tmo-main branch
          modified_files_folders=$(git diff --name-only $commit_hash HEAD)
          echo "::set-output name=modified::$modified_files_folders"

      - name: Run Word Exclusion script
        if: steps.changes.outputs.modified != ''
        run: |
          $WordList = @("private", "pets", "tracker") # Add the words you want to find here
          $WordExcludeList = @("snippet") # Add words to exclude from search
          $Matches = @()

          $ModifiedItems = $env:MODIFIED_ITEMS -split "`n"

          Get-ChildItem -Path $ModifiedItems -Recurse | ForEach-Object {
              $Type = if ($_.PSIsContainer) { "dir" } else { "file" }
              $Name = $_.FullName

              foreach ($Pattern in $WordList) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if ($Name -like "*$Pattern*") {
                          $Matches += New-Object PSObject -Property @{
                              Type = $Type
                              Match = $Pattern
                              Name = $Name
                          }
                      }
                  }
              }
          }

          Get-ChildItem -Path $ModifiedItems -Recurse -File | ForEach-Object {
              $FileName = $_.FullName

              foreach ($Pattern in $WordList) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if (Select-String -Path $FileName -Pattern $Pattern -Quiet) {
                          $Matches += New-Object PSObject -Property @{
                              Type = "file"
                              Match = $Pattern
                              Name = $FileName
                          }
                      }
                  }
              }
          }

          $Matches | ConvertTo-Json -Depth 100 | Out-File matches.json
        env:
          MODIFIED_ITEMS: ${{ steps.changes.outputs.modified }}
        shell: pwsh

      - name: Upload JSON output
        uses: actions/upload-artifact@v2
        with:
          name: matches
          path: matches.json
