name: Word Exclusion

on:
  push:
    branches:
      - 'tmo-main'

jobs:
  word_exclusion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell Core
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Get modified files and folders
        id: changes
        run: |
          # Fetch the commit hash of the latest push
          commit_hash=$(git rev-parse HEAD)
          # Get the list of modified files and folders in the latest push
          modified_files_folders=$(git diff-tree --no-commit-id --name-only -r $commit_hash)
          echo "::set-output name=modified::$modified_files_folders"

      - name: Run Word Exclusion script
        if: steps.changes.outputs.modified != ''
        run: |
          $Patterns = Get-Content .gitattributes | Select-String -Pattern '(?<=\s).*' -AllMatches | ForEach-Object { $_.Matches.Value }
          $RootPath = $env:GITHUB_WORKSPACE
          $WordExcludeList = @("pet", "traker") # Add the words you want to exclude here
          $Matches = @()

          $ModifiedItems = $env:MODIFIED_ITEMS -split "`n"

          Get-ChildItem -Path $ModifiedItems -Recurse | ForEach-Object {
              $Type = if ($_.PSIsContainer) { "dir" } else { "filename" }
              $Name = $_.FullName

              foreach ($Pattern in $Patterns) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if ($Name -like "*$Pattern*") {
                          $Matches += New-Object PSObject -Property @{
                              Type = $Type
                              Match = $Pattern
                              Name = $Name
                          }
                      }
                  }
              }
          }

          Get-ChildItem -Path $ModifiedItems -Recurse -File | ForEach-Object {
              $FileName = $_.FullName

              foreach ($Pattern in $Patterns) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if (Select-String -Path $FileName -Pattern $Pattern -Quiet) {
                          $Matches += New-Object PSObject -Property @{
                              Type = "file"
                              Match = $Pattern
                              Name = $FileName
                          }
                      }
                  }
              }
          }

          $Matches | ConvertTo-Json -Depth 100 | Out-File matches.json
        shell: pwsh

      - name: Upload JSON output
        uses: actions/upload-artifact@v2
        with:
          name: matches
          path: matches.json
