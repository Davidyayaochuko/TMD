name: Word Exclusion

on:
  push:
    branches:
      - 'tmo-main'

jobs:
  word_exclusion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell Core
        run: |
          # Import the Microsoft repository GPG key
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          # Install PowerShell Core
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Run Word Exclusion script
        run: |
          $Patterns = @("private", "pets*", "tracker*")
          $RootPath = $env:GITHUB_WORKSPACE  # This variable points to the root of the checked-out repository
          $WordExcludeList = @("snippet")
          $StartLineNumber = 18  # Change this value to the desired starting line number
          $Matches = @()

          # Read the .gitattributes file and extract paths to search
          $GitAttributesFile = Join-Path -Path $RootPath -ChildPath ".gitattributes"
          $SelectedFolders = Get-Content -Path $GitAttributesFile | ForEach-Object {
              if ($_ -match '^path="?(.*)"?$') {
                  $matches[1]
              }
          }

          # Find matches in file contents within the selected folders in .gitattributes
          Get-ChildItem -Path $SelectedFolders -Recurse -File | ForEach-Object {
              $FileName = $_.FullName

              foreach ($Pattern in $Patterns) {
                  # Check if the current pattern is not in the word exclude list
                  if ($WordExcludeList -notcontains $Pattern) {
                      # Search for the pattern starting from the specified line number
                      $MatchesInFile = Select-String -Path $FileName -Pattern $Pattern -Context $StartLineNumber, 0
                      foreach ($Match in $MatchesInFile) {
                          $LineNumber = $Match.LineNumber
                          $Context = $Match.Context.PreContext + $Match.Line + $Match.Context.PostContext
                          $Matches += New-Object PSObject -Property @{
                              Type = "file"
                              Match = $Pattern
                              Name = $FileName
                              LineNumber = $LineNumber
                              Context = $Context
                          }
                      }
                  }
              }
          }

          # Output matches
          $Matches

          # Convert the matches to JSON format
          $MatchesJson = $Matches | ConvertTo-Json -Depth 100
          Write-Output $MatchesJson | Out-File matches.json
        shell: pwsh  # Use the PowerShell shell to execute the script


      - name: Upload JSON output
        uses: actions/upload-artifact@v2
        with:
          name: matches
          path: matches.json
