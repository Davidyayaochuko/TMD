name: Word Exclusion

on:
  push:
    branches:
      - 'main'
  pull_request_target:
    branches:
      - 'main'

jobs:
  word_exclusion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell Core
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Run Word Search script
        run: |
          $WordList = @("*private*", "*pet*", "*tracker*") # Add the words you want to find here
          $Matches = @()

          # Read the .gitattributes file
          $GitAttributes = Get-Content -Path .gitattributes

          foreach ($Line in $GitAttributes) {
            # Extract directory path from the .gitattributes line
            if ($Line -match '^\S+\s+(-?)(?!\s*#)') {
              $Directory = $matches[0].Trim()

              # Skip this iteration if the line is a comment or contains an "export-ignore" flag
              if ($Line -notmatch '^\s*#' -and $matches[1] -notmatch 'export-ignore') {
                if (Test-Path $Directory) {
                  Get-ChildItem -Path $Directory -Recurse -Include "*" -File | ForEach-Object {
                    $FileName = $_.FullName

                    foreach ($Word in $WordList) {
                      if (Select-String -Path $FileName -Pattern $Word -Quiet) {
                        $Matches += New-Object PSObject -Property @{
                          Directory = $Directory
                          Match = $Word
                          File = $FileName
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          if ($Matches.Count -gt 0) {
            echo "Found matches for the following words: $($Matches | ForEach-Object { $_.Match })"
            exit 1 # This will cause the script to exit with an error code, stopping the pipeline.
          } else {
            echo "No matches found. Proceeding with the pipeline."
          }

          $Matches | ConvertTo-Json -Depth 100 | Out-File matches.json
        shell: pwsh

      - name: Get modified files and folders
        id: changes
        run: |
          # Fetch the commit hash of the latest commit on the main branch
          commit_hash=$(git rev-parse origin/main)
          # Get the list of modified files and folders between the current branch and main branch
          modified_files_folders=$(git diff --name-only $commit_hash HEAD)
          echo "::set-output name=modified::$modified_files_folders"

      - name: Run Word Exclusion script
        if: steps.changes.outputs.modified != ''
        run: |
          $WordList = @("*private*", "*pet*", "*tracker*") # Add the words you want to find here
          $WordExcludeList = @("snippet") # Add words to exclude from search
          $Matches = @()

          $ModifiedItems = $env:MODIFIED_ITEMS -split "`n"

          Get-ChildItem -Path $ModifiedItems -Recurse | ForEach-Object {
              $Type = if ($_.PSIsContainer) { "dir" } else { "file" }
              $Name = $_.FullName

              foreach ($Pattern in $WordList) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if ($Name -like "*$Pattern*") {
                          $Matches += New-Object PSObject -Property @{
                              Type = $Type
                              Match = $Pattern
                              Name = $Name
                          }
                      }
                  }
              }
          }

          Get-ChildItem -Path $ModifiedItems -Recurse -File | ForEach-Object {
              $FileName = $_.FullName

              foreach ($Pattern in $WordList) {
                  if ($WordExcludeList -notcontains $Pattern) {
                      if (Select-String -Path $FileName -Pattern $Pattern -Quiet) {
                          $Matches += New-Object PSObject -Property @{
                              Type = "file"
                              Match = $Pattern
                              Name = $FileName
                          }
                      }
                  }
              }
          }

          if ($Matches.Count -gt 0) {
            echo "Found matches for the following words: $($Matches | ForEach-Object { $_.Match })"
            exit 1 # This will cause the script to exit with an error code, stopping the pipeline.
          } else {
            echo "No matches found in modified files. Proceeding with the pipeline."
          }

          $Matches | ConvertTo-Json -Depth 100 | Out-File matches.json
        env:
          MODIFIED_ITEMS: ${{ steps.changes.outputs.modified }}
        shell: pwsh

      - name: Upload JSON output
        uses: actions/upload-artifact@v2
        with:
          name: matches
          path: matches.json
